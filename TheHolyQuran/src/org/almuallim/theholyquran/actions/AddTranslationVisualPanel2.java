/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.almuallim.theholyquran.actions;

import java.awt.ComponentOrientation;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.almuallim.service.helpers.LanguageUtils;
import org.almuallim.theholyquran.api.Verse;
import org.almuallim.theholyquran.api.VerseCollection;

public final class AddTranslationVisualPanel2 extends JPanel {

    private VerseCollection collection;
    private Object selectedItem;

    /**
     * Creates new form AddTranslationVisualPanel2
     */
    public AddTranslationVisualPanel2() {
        initComponents();
        List<String> l = LanguageUtils.getAllLanguageNames();
        jComboBox1.setModel(new DefaultComboBoxModel<>(l.toArray(new String[l.size()])));
    }

    @Override
    public String getName() {
        return "Preview Translation / Select Language";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        jTextPane1.setContentType("text/html"); // NOI18N
        jTextPane1.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jScrollPane1.setViewportView(jTextPane1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setMinimumSize(new java.awt.Dimension(100, 50));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 50));

        jLabel1.setLabelFor(jComboBox1);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AddTranslationVisualPanel2.class, "AddTranslationVisualPanel2.jLabel1.text")); // NOI18N

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(AddTranslationVisualPanel2.class, "AddTranslationVisualPanel2.jCheckBox1.text")); // NOI18N
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, 0, 141, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox1)
                .addGap(82, 82, 82))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        boolean rtl = jCheckBox1.isSelected();
        firePropertyChange("PROP_RTL_CHANGE", !rtl, rtl);
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        firePropertyChange("PROP_LANG_SELECTED", selectedItem, jComboBox1.getSelectedItem());
        selectedItem = jComboBox1.getSelectedItem();
    }//GEN-LAST:event_jComboBox1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    void updatePreview(VerseCollection collection) {
        jTextPane1.setText("");
        String dir = jCheckBox1.isSelected() ? "rtl" : "ltr";
        StringBuilder html = new StringBuilder();
        html.append("<html dir=\"").append(dir).append("\"><body>");
        for (Verse verse : collection) {
            html.append("<p>");
            html.append(verse.getText());
            html.append("</p>");
        }
        html.append("</body></html>");
        jTextPane1.setText(html.toString());
        //the dir attrib is not aligning the text
        jTextPane1.setComponentOrientation(jCheckBox1.isSelected() ? ComponentOrientation.RIGHT_TO_LEFT : ComponentOrientation.LEFT_TO_RIGHT);
    }

    boolean languageSelected() {
        return jComboBox1.getSelectedIndex() != -1;
    }

    String getLanguage() {
        return jComboBox1.getSelectedItem().toString();
    }

    boolean isRtl() {
        return jCheckBox1.isSelected();
    }
}
